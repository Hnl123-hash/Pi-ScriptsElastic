# -*- coding: utf-8 -*-
"""Elastic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QjFk1qxv_6gai3Y-aJOtRpJzhOvwGQTc
"""

# Instala pacote do ElasticSearch

!pip install ElasticSearch

from elasticsearch import Elasticsearch
from pprint import pprint

# Conecta com o elastic. OBS: es01 eh a url pois eh o nome do container que esta rodando o elastic na network do docker
es = Elasticsearch("http://es01:9200")
clientInfo = es.info()
pprint(clientInfo.body)

# define o mapping para o index
mapping = {
    "mappings": {
        "properties": {
            "nome_cientifico": {
                "type": "text"
            },
            "especie": {
                "type": "keyword",
                "index": False
            },
            "genero": {
                "type": "keyword",
                "index": False
            },
            "familia": {
                "type": "keyword",
                "index": False
            },
            "higherClassification": {
                "type": "keyword",
                "index": False
            },
            "order": {
                "type": "keyword",
                "index": False
            },
            "class": {
                "type": "keyword",
                "index": False
            },
            "phylum": {
                "type": "keyword",
                "index": False
            },
            "kingdom": {
                "type": "keyword",
                "index": False
            },
            "references": {
                "type": "keyword",
                "index": False
            },
            "taxonID": {
                "type": "keyword",
                "index": False
            },
            "nomesPopulares": {
                "type": "nested",
                "include_in_parent": True,
                "properties": {
                    "vernacularName": {
                        "type": "keyword",
                        "index": False
                    },
                    "language": {
                        "type": "keyword",
                        "index": False
                    },
                    "locality": {
                        "type": "keyword",
                        "index": False
                    }
                }
            }
        }
    }
}

es.indices.create(index="taxonomia", mappings=mapping["mappings"])

es.indices.delete(index="taxonomia")

import json

taxonomiaJson = json.load(open("/content/especies_com_nomes_populares.json"))

lista_transformada = []

for nome, atributos in taxonomiaJson.items():
    novo_objeto = dict(atributos)  # copia os dados
    novo_objeto["nome_cientifico"] = nome  # adiciona a chave principal como campo
    lista_transformada.append(novo_objeto)

caminho_arquivo = "taxonomia_transformada.json"
with open(caminho_arquivo, "w", encoding="utf-8") as arquivo:
    json.dump(lista_transformada, arquivo, ensure_ascii=False, indent=4)

import json

taxonomiaJsonTransformada = json.load(open("/content/taxonomia_transformada.json"))

lista_bulk_es = []

for documento in taxonomiaJsonTransformada:
    operacao = {"index": {"_index": "taxonomia"}}
    lista_bulk_es.append(operacao)
    lista_bulk_es.append(documento)

es.bulk(index="taxonomia", body=lista_bulk_es)

from pprint import pprint

indice = "taxonomia"
nome_cientifico = "Adiscanthus fusciflorus Dcke"

query = {
    "query": {
        "match": {
            "nome_cientifico": {
                "query": nome_cientifico,
                "fuzziness": "AUTO"
            }
        }
    }
}

queryExata = {
    "query": {
        "match_phrase": {
            "nome_cientifico":  {
                "query": nome_cientifico,
            }
        }
    }
}

res = es.search(index=indice, body=query)
resExata = es.search(index=indice, body=queryExata)

for hit in res["hits"]["hits"]:
    pprint(hit["_source"]["nome_cientifico"])

print("--------------------------------------------------------------------")

for hit in resExata["hits"]["hits"]:
    pprint(hit["_source"]["nome_cientifico"])

mappingPrintado = es.indices.get_mapping(index="taxonomia")
print(mappingPrintado)

es.count(index="taxonomia")

from pprint import pprint

res = es.search(
    index="taxonomia",
    body={
        "from": 0,
        "size": 10,
        "query": {
            "match_all": {}
        }
    }
)

pprint(res["hits"]["hits"])

mappingUsuario = {
  "mappings": {
    "properties": {
      "email": {
        "type": "keyword",
        "index": False
      },
      "senhaHash": {
        "type": "keyword",
        "index": False
      },
      "permissoes": {
        "type": "keyword",
        "index": False
      }
    }
  }
}

es.indices.create(index="usuarios", mappings=mappingUsuario["mappings"])

es.indices.delete(index="usuarios")